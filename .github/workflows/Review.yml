name: Move Linked Issues to Review When PR is Opened or Edited

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  update-issues-status:
    runs-on: ubuntu-latest
    steps:
      - name: Find referenced issues in PR body
        id: find-issues
        uses: actions/github-script@v7
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            const issueNumbers = [...prBody.matchAll(/#(\d+)/g)].map(m => m[1]);
            core.setOutput('issues', JSON.stringify(issueNumbers));

      - name: Move referenced issues to Review
        if: steps.find-issues.outputs.issues != '[]'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumbers = JSON.parse('${{ steps.find-issues.outputs.issues }}');

            const PROJECT_ID = 'PVT_kwHODSILks4A9pWS';
            const STATUS_FIELD_ID = 'PVTSSF_lAHODSILks4A9pWSzgxSYFA';
            const REVIEW_OPTION_ID = '1792fc32';

            for (const issueNumber of issueNumbers) {
              // Find the project item for this issue
              const { repository } = await github.graphql(`
                query($owner: String!, $repo: String!, $issue: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issue) {
                      id
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue: parseInt(issueNumber, 10)
              });

              const issue = repository.issue;
              const projectItem = issue.projectItems.nodes.find(
                n => n.project.id === PROJECT_ID
              );
              if (projectItem) {
                await github.graphql(`
                  mutation($itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: "${PROJECT_ID}"
                        itemId: $itemId
                        fieldId: $fieldId
                        value: { singleSelectOptionId: $optionId }
                      }
                    ) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `, {
                  itemId: projectItem.id,
                  fieldId: STATUS_FIELD_ID,
                  optionId: REVIEW_OPTION_ID
                });
              }
            }
